@page "/servers/{id:int}"

<h3>Edit Server</h3>

<br/>
<br/>



@if(server != null)
{
	@*Edit form can be used to have a nice, organized structure. 
	Use Model attribute to represent data context (server in this case).
	There are many different types of input components - we use InputText and InputCheckbox here.*@
	<EditForm Model="server" FormName="formServer" OnSubmit="Submit">

		@*We don't want this displayed but we still want it bound.
			So, we add the ServerId as an InputNumber and set it to hidden*@
		<InputNumber @bind-Value="server.ServerId" hidden />

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">Name</label>
			</div>
			<div class="col-6">
				<InputText @bind-Value="server.Name" class="form-control"/>
			</div>
		</div>

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">City</label>
			</div>
			<div class="col-6">
				<InputText @bind-Value="server.City" class="form-control" />
			</div>
		</div>

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">Online</label>
			</div>
			<div class="col-6">
				<InputCheckbox @bind-Value="server.IsOnline" class="form-check-input" />
			</div>
		</div>
		<br/>
		@*Submit button that will submit the form*@
		<button class="btn btn-primary" type="submit">Update</button>
		&nbsp;
		@*Close button that just links to servers page*@
		<a href="/servers" class="btn btn-primary">Close</a>
	</EditForm>
} 


@code {
	[Parameter]
	public int Id { get; set; }

	[SupplyParameterFromForm]
	private Server? server { get; set; }

	protected override void OnParametersSet()
	{
		// Only use static repo to retrieve server data if server is not null
		// This prevents overriding to original when update button is submitted
		server ??= ServersRepository.GetServerById(this.Id);
	}

	// Event handler for submit button
	private void Submit()
	{
		if (server != null)
		{
			ServersRepository.UpdateServer(server.ServerId, server);
		}
	}
}
