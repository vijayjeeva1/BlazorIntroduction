@* This @page directive with url extension is what makes a component a routable component*@
@page "/servers"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<h3>Servers</h3>

<br/>
<br/>

@* References ServerComponent which is a non-routable component 
Need to add @using BlazorIntroduction.Components.Controls to _imports.razor to not have to use entire namespace every time *@
@* <ServerComponent></ServerComponent>
<br/>
<ServerComponent></ServerComponent> *@

@*Add bootstrap container to format buttons and make them align properly when resizing the window.
	Found card component from bootstrap website - https://getbootstrap.com/docs/5.3/components/card/
*@
<div class="container-fluid text-center">
	<div class="row w-50">
		@foreach (var city in cities)
		{
			<div class="col">
				<div class="card @(selectedCity == city ? "border-primary" : "")">
					<img src="@($"/images/{city}.jpg")" class="card-img-top" alt="...">
					<div class="card-body">
						<button type="button" class="btn btn-primary" @onclick="@(() => {SelectCity(city); })">@city</button>
					</div>
				</div>
			</div>
		}
	</div>
</div>

<br/>
<div class="input-group mb-3">
	<input type="text" class="form-control" placeholder="Search Servers" 
		@bind-value="serverFilter" 
		@bind-value:event="oninput" />
	<button class="btn btn-outline-secondary" type="button" @onclick="HandleSearch">Search</button>
</div>

<br/>

<ul>
	@* Use @ to use C# syntax in html section. Always need curly braces for control structures.
		You can use html elements inside the loop to repeatedly display them in a list.
	*@
	@foreach(var server in servers)
	{
		<li>
			@server.Name in @server.City is
			<span style="color:@((server.IsOnline ? "green" : "red"))">
				@(server.IsOnline ? "Online" : "Offline")
			</span>
			&nbsp; @*This is a space.*@

			@*Use route parameters to go to specific server edit page*@
			<a href="/servers/@server.ServerId" class="btn btn-link">Edit</a>

			@*Need to create a form to delete servers. 
			Need to do it this way (instead of adding a regular button) because that is how we will properly hook up with the model (server).
			Note that the form name needs to be unique, so to ensure this happens inside the for loop, user implicit function and get server id.
			On Submit will be handled by our DeleteServer function.*@
			<EditForm 
				Model="server"
				FormName="@($"form-server-{server.ServerId}")"
				OnValidSubmit="@(() => { DeleteServer(server.ServerId); })">
					<button type="submit" class="btn btn-primary">Delete</button> 
			</EditForm>
		</li>
	}
</ul>
<p>
	<a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>

@code {

	private List<Server> servers = ServersRepository.GetServersByCity("Toronto");
	private List<string> cities = CitiesRepository.GetCities();
	private string selectedCity = "Toronto";

	private string _serverFilter = "";
	private string serverFilter 
	{ 
		get => _serverFilter; 
		set
		{
			_serverFilter = value;
			this.servers = ServersRepository.SearchServers(_serverFilter);
		}		
	}

	private void DeleteServer(int serverId)
	{
		if (serverId > 0)
		{
			ServersRepository.DeleteServer(serverId);
			NavigationManager.Refresh(); // Refreshes page so that deleted server is gone.
		}
	}

	private void SelectCity(string cityName)
	{
		this.selectedCity = cityName;
		this.servers = ServersRepository.GetServersByCity(this.selectedCity);
	}

	private void HandleSearch()
	{
		this.servers = ServersRepository.SearchServers(serverFilter);
		this.selectedCity = string.Empty;
	}
}
