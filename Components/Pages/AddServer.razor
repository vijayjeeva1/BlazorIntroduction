@page "/servers/add"
@inject NavigationManager NavigationManager

<h3>Add Server</h3>
<br />

@if (server != null)
{
	@*Edit form can be used to have a nice, organized structure. 
	Use Model attribute to represent data context (server in this case).
	There are many different types of input components - we use InputText and InputCheckbox here.*@
	<EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">Name</label>
			</div>
			<div class="col-6">
				<InputText @bind-Value="server.Name" class="form-control" />
			</div>
			<div class="col">
				<ValidationMessage For="() => server.Name"></ValidationMessage>
			</div>
		</div>

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">City</label>
			</div>
			<div class="col-6">
				<InputText @bind-Value="server.City" class="form-control" />
			</div>
			<div class="col">
				<ValidationMessage For="() => server.City"></ValidationMessage>
			</div>
		</div>

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">Online</label>
			</div>
			<div class="col-6">
				<InputCheckbox @bind-Value="server.IsOnline" class="form-check-input" />
			</div>
		</div>
		<br />
		@*Submit button that will submit the form*@
		<button class="btn btn-primary" type="submit">Save</button>
		&nbsp;
		@*Close button that just links to servers page*@
		<a href="/servers" class="btn btn-primary">Close</a>
	</EditForm>
}

@code {
	[SupplyParameterFromForm]
	private Server server { get; set; } = new Server() { IsOnline = false };

	// Event handler for submit button
	private void Submit()
	{
		if (server != null)
		{
			ServersRepository.AddServer(server);
		}

		NavigationManager.NavigateTo("/servers");
	}
}
